package com.nt.configuration;

import java.util.Properties;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.springframework.orm.hibernate5.HibernateTransactionManager;
import org.springframework.orm.hibernate5.LocalSessionFactoryBean;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;
import org.springframework.web.servlet.ViewResolver;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
import org.springframework.web.servlet.view.InternalResourceViewResolver;

@Configuration
@EnableWebMvc
@EnableTransactionManagement
@EnableWebSecurity // Add this annotation
@ComponentScan(basePackages = { "com.nt.controllers", "com.nt.dto", "com.nt.dao", "com.nt.service" })
@Import(DataSourceConfig.class)

public class AppCfg implements WebMvcConfigurer {

	@Autowired
	private DataSource dataSource;

	@Bean
	public LocalSessionFactoryBean sessionFactory() {
		LocalSessionFactoryBean sessionFactory = new LocalSessionFactoryBean();
		sessionFactory.setDataSource(dataSource);
		sessionFactory.setPackagesToScan("com.nt.dto");
		sessionFactory.setHibernateProperties(hibernateProperties());
		return sessionFactory;
	}

	@Bean
	public PlatformTransactionManager transactionManager() {
		HibernateTransactionManager transactionManager = new HibernateTransactionManager();
		transactionManager.setSessionFactory(sessionFactory().getObject());
		return transactionManager;
	}

	@Bean
	public ViewResolver viewResolver() {
		InternalResourceViewResolver resolver = new InternalResourceViewResolver();
		resolver.setPrefix("/WEB-INF/views/");
		resolver.setSuffix(".jsp");
		return resolver;
	}

	private Properties hibernateProperties() {
		Properties properties = new Properties();
		properties.setProperty("hibernate.dialect", "org.hibernate.dialect.MySQL5Dialect");
		properties.setProperty("hibernate.hbm2ddl.auto", "update");
		properties.setProperty("hibernate.show_sql", "true");
		return properties;
	}
    protected void configure(HttpSecurity http) throws Exception {
        http
            .authorizeRequests()
                .antMatchers("/register").permitAll()
                .anyRequest().authenticated()
                .and()
            .formLogin()
                .loginPage("/login")
                .permitAll()
                .and()
            .logout()
                .permitAll();
    }
	

}
package com.nt.configuration;

import javax.sql.DataSource;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;

@Configuration
public class DataSourceConfig {

	@Bean
	public DataSource dataSource() {
		HikariConfig config = new HikariConfig();
		config.setJdbcUrl("jdbc:mysql://localhost:3306/db");
		config.setUsername("root");
		config.setPassword("login1-2");
		config.setDriverClassName("com.mysql.cj.jdbc.Driver"); // Optional, HikariCP will automatically detect the
															// driver class
		return new HikariDataSource(config);
	}
}
package com.nt.configuration;

import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.ServletRegistration;

import org.springframework.web.WebApplicationInitializer;
import org.springframework.web.context.support.AnnotationConfigWebApplicationContext;
import org.springframework.web.servlet.DispatcherServlet;

public class WebCfg implements WebApplicationInitializer {

	@Override
	public void onStartup(ServletContext servletContext) throws ServletException {
		AnnotationConfigWebApplicationContext webApplicationContext = new AnnotationConfigWebApplicationContext();
		webApplicationContext.register(AppCfg.class);

		DispatcherServlet dispatcherServlet = new DispatcherServlet(webApplicationContext);
		ServletRegistration.Dynamic registration = servletContext.addServlet("dispatcher", dispatcherServlet);
		registration.setLoadOnStartup(1);
		registration.addMapping("/");
	}
}
package com.nt.controllers;

import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.nt.dto.Device;
import com.nt.service.DeviceServiceImpl;

@Controller
@SessionAttributes("device")
public class DeviceController {

	private final DeviceServiceImpl deviceService;

	@Autowired
	public DeviceController(DeviceServiceImpl deviceService) {
		this.deviceService = deviceService;
	}

	// Mapping for displaying the update form
	@GetMapping("/update")
	public String showUpdateForm(Model model) {
		if (!model.containsAttribute("device")) {
			model.addAttribute("device", new Device());
		}
		return "update";
	}

	// Mapping for displaying the search form
	@RequestMapping("/search")
	public String showSearchForm(Model model) {
		if (!model.containsAttribute("device")) {
			model.addAttribute("device", new Device());
		}
		return "search";
	}

	// Mapping for displaying the insert form
	@GetMapping("/insert")
	public String showInsertForm(Model model) {
		if (!model.containsAttribute("device")) {
			model.addAttribute("device", new Device());
		}
		return "insert";
	}

	@GetMapping("/DSucess")
	public String showSuccessPage() {
		return "DSucess";
	}

	// Mapping for displaying the delete form
	@GetMapping("/delete")
	public String showDeleteForm(Model model) {
		if (!model.containsAttribute("device")) {
			model.addAttribute("device", new Device());
		}
		return "delete";
	}

	@GetMapping("/DError")
	public String DErrorPage() {
		return "DError";
	}

	@PostMapping("/search")
	public String search(@Valid @ModelAttribute("device") Device dev, BindingResult result,
			RedirectAttributes redirectAttributes, Model model) {
		if (result.hasErrors()) {
			// There are validation errors, return to the search form with error messages
			return "search"; // Assuming the view name is "search.jsp"
		}
		// Validation passed, proceed with the search operation
		List<Device> devices = deviceService.searchDeviceByName(dev.getName());
		if (!devices.isEmpty()) {
			model.addAttribute("device", devices.get(0)); // Add the entire device object to the model
			redirectAttributes.addFlashAttribute("message", "Device '" + dev.getName() + "' found ");
			return "redirect:/DSucess";
		} else {
			redirectAttributes.addFlashAttribute("message", "Device '" + dev.getName() + "' not found");
			return "redirect:/DError?notFound=true";
		}
	}

	@PostMapping("/insert")
	public String insert(@Valid @ModelAttribute("device") Device dev, RedirectAttributes redirectAttributes,
			Model model, BindingResult result) {
		if (result.hasErrors()) {
			// There are validation errors, return to the insert form with error messages
			return "insert"; // Assuming the view name is "insert.jsp"
		}

		// Validation passed, proceed with the insert operation
		List<Device> devices = deviceService.searchDeviceByName(dev.getName());

		if (devices.isEmpty()) {
			// If the device doesn't exist, insert it
			deviceService.insert(dev, dev.getName(), dev.getCount());
			model.addAttribute("name", dev.getName());
			model.addAttribute("count", dev.getCount());
			redirectAttributes.addFlashAttribute("message", "Device '" + dev.getName() + "' inserted ");
			return "redirect:/DSucess";
		} else {
			model.addAttribute("name", dev.getName());
			model.addAttribute("count", devices.get(0).getCount());
			redirectAttributes.addFlashAttribute("message", "Device '" + dev.getName() + "' not insert ");
			return "redirect:/DError?notFound=true";
		}
	}

	@PostMapping("/delete")
	public String delete(@Valid @ModelAttribute("device") Device dev, RedirectAttributes redirectAttributes,
			Model model, BindingResult result) {

		if (result.hasErrors()) {
			// There are validation errors, return to the delete form with error messages
			return "delete"; // Assuming the view name is "delete.jsp"
		}

		// Validation passed, proceed with the delete operation
		List<Device> devices = deviceService.searchDeviceByName(dev.getName());

		if (!devices.isEmpty()) {
			model.addAttribute("name", dev.getName());
			model.addAttribute("count", devices.get(0).getCount());
			deviceService.delete(dev.getName());
			redirectAttributes.addFlashAttribute("message", "Device '" + dev.getName() + "' deleted ");
			return "redirect:/DSucess";
		} else {
			redirectAttributes.addFlashAttribute("message", "Device '" + dev.getName() + "' not deleted ");
			return "redirect:/DError?notFound=true";
		}
	}

	@PostMapping("/update")
	public String update(@Valid @ModelAttribute("device") Device dev, RedirectAttributes redirectAttributes,
			Model model, BindingResult result) {
		if (result.hasErrors()) {
			// There are validation errors, return to the update form with error messages
			return "update"; // Assuming the view name is "update.jsp"
		}

		// Validation passed, proceed with the update operation
		List<Device> devices = deviceService.update(dev.getName(), dev.getCount());

		if (!devices.isEmpty()) {
			model.addAttribute("name", dev.getName());
			model.addAttribute("count", devices.get(0).getCount());
			redirectAttributes.addFlashAttribute("message", "Device '" + dev.getName() + "' updated ");
			return "redirect:/DSucess";
		} else {
			redirectAttributes.addFlashAttribute("message", "Device '" + dev.getName() + "' not updated ");
			return "redirect:/DError?notFound=true";
		}
	}

}
package com.nt.controllers;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model; // Import Model
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import com.nt.dto.employee;
import com.nt.service.EmployeeServiceImpl;

@Controller
public class LoginController {
	private final EmployeeServiceImpl employeeService;

	@Autowired
	public LoginController(EmployeeServiceImpl employeeService) {
		this.employeeService = employeeService;
	}

	@RequestMapping("/login")
	public String login(Model model) { // Add Model as parameter
		// Add the 'login' model attribute to the model
		model.addAttribute("login", new employee());
		return "login";
	}

	@PostMapping("/process")
	public String process(@ModelAttribute("login") employee emp) {
		// Implement your login logic here
		List<employee> l = employeeService.searchEmployeeByName(emp.getPass(), emp.getName());
		if (!(l.isEmpty())) {
			return "Device";
		} else {
			return "login";
		}
	}
}
package com.nt.controllers;

import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import com.nt.dto.employee;
import com.nt.service.EmployeeServiceImpl;

@Controller
public class RegisterController {
    private final EmployeeServiceImpl employeeService;

    @Autowired
    public RegisterController(EmployeeServiceImpl employeeService) {
        this.employeeService = employeeService;
    }

    @RequestMapping("/register")
    public String register(@ModelAttribute("register") employee emp) {
        return "register";
    }

    @PostMapping("/Reprocess")
    public String Reprocess(@Valid @ModelAttribute("register") employee emp, BindingResult result) {
        if (result.hasErrors()) {
            return "register";
        }
        List<employee> l = employeeService.searchEmployee(emp.getEMailId(), emp.getName());
        if (l.isEmpty()) {
            employeeService.insert(emp);
            // Redirect to the login page
            return "redirect:/login"; // Assuming "/login" is your login page endpoint
        } else {
            return "register";
        }
    }
}
package com.nt.dao;

import java.util.List;

import com.nt.dto.Device;

public interface DeviceDao {

	List<Device> insert(Device dev,String name, Integer count);

	List<Device> searchDeviceByName(String name);

	List<Device> update(String name, int count);

	void delete(String name);

}
package com.nt.dao;

import java.util.ArrayList;
import java.util.List;

import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.dao.DataAccessResourceFailureException;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.nt.dto.Device;

@Repository
public class DeviceDAOImpl implements DeviceDao {
	@Autowired
	private SessionFactory sessionFactory;

	@Override
	public List<Device> insert(Device dev, String name, Integer count) {
		try {
			Session session = sessionFactory.getCurrentSession();
			List<Device> devices = searchDeviceByName(name);
			// Check if the device with the given name already exists
			if (devices.isEmpty()) {
				// Create a new Device object with the provided name and count
				Device newDevice = new Device();
				newDevice.setName(name);
				newDevice.setCount(count);
				// Save the new Device object to the database
				session.save(newDevice);
				// Create a new list and add the inserted device
				List<Device> insertedDevices = new ArrayList<>();
				insertedDevices.add(newDevice);
				return insertedDevices;
			} else {
				// If a device with the same name already exists, return the list of existing
				// devices
				return devices;
			}
		} catch (Exception e) {
			throw new DataAccessResourceFailureException("Error occurred while inserting Device", e);
		}
	}

	@Override
	@Transactional(readOnly = true)
	public List<Device> searchDeviceByName(String name) {
		try {
			Session session = sessionFactory.getCurrentSession();
			String hql = "FROM Device WHERE lower(name) = lower(:name)";
			return session.createQuery(hql, Device.class).setParameter("name", name).getResultList();
		} catch (HibernateException e) {
			throw new DataAccessResourceFailureException("Error occurred while searching for device by name", e);
		}
	}

	@Override
	@Transactional(rollbackFor = DataAccessException.class)
	public List<Device> update(String name, int count) throws DataAccessException {
		List<Device> devices = null;
		try {
			Session session = sessionFactory.getCurrentSession();
			devices = searchDeviceByName(name);
			for (Device device : devices) {
				device.setCount(count);
				session.update(device);
			}
		} catch (DataAccessException e) {
			throw new DataAccessException("Error occurred while updating device", e) {
			};
		}
		return devices;

	}

	@Override
	@Transactional(rollbackFor = DataAccessException.class)
	public void delete(String name) throws DataAccessException {
		try {
			Session session = sessionFactory.getCurrentSession();
			List<Device> devices = searchDeviceByName(name);
			for (Device dev : devices) {
				session.delete(dev);
			}
			System.out.println("Employees with name " + name + " deleted successfully.");
		} catch (DataAccessException e) {
			throw new DataAccessException("Error occurred while deleting employee", e) {
			};
		}
	}
}
package com.nt.dao;

import java.util.List;

import org.springframework.dao.DataAccessException;

import com.nt.dto.employee;

public interface EmployeeDAO {

	void insert(employee emp);

	List<employee> searchEmployeeByName(String pass, String name);

	List<employee> searchEmployee(String EMailId, String name) throws DataAccessException;
}
package com.nt.dao;

import java.util.List;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.nt.dto.employee;

@Repository
public class EmployeeDAOImpl implements EmployeeDAO {

	@Autowired
	private SessionFactory sessionFactory;

	@Override
	@Transactional(readOnly = true)
	public List<employee> searchEmployee(String EMailId, String name) throws DataAccessException {
		try {
			Session session = sessionFactory.getCurrentSession();
			String hql = "FROM employee WHERE name = :name OR EMailId=:EMailId";
			return session.createQuery(hql).setParameter("name", name).setParameter("EMailId", EMailId).list();
		} catch (DataAccessException e) {
			throw new DataAccessException("Error occurred while searching employee by name", e) {
			};
		}
	}

	@Override
	@Transactional(rollbackFor = DataAccessException.class)
	public void insert(employee emp) throws DataAccessException {
		try {
			Session session = sessionFactory.getCurrentSession();
			// Set employee details
			emp.setName(emp.getName());
			emp.setPass(emp.getPass());
			emp.setPhone(emp.getPhone());
			emp.setEMailId(emp.getEMailId());
			session.save(emp);
		} catch (DataAccessException e) {
			throw new DataAccessException("Error occurred while inserting employee", e) {
			};
		}
	}

	@Override
	@Transactional(readOnly = true)
	public List<employee> searchEmployeeByName(String pass, String name) throws DataAccessException {
		try {
			Session session = sessionFactory.getCurrentSession();
			String hql = "FROM employee WHERE name = :name and pass=:pass";
			return session.createQuery(hql).setParameter("name", name).setParameter("pass", pass).list();
		} catch (DataAccessException e) {
			throw new DataAccessException("Error occurred while searching employee by name", e) {
			};
		}
	}

}
package com.nt.dto;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

import org.hibernate.validator.constraints.NotBlank;
import org.springframework.stereotype.Component;

@Component
@Entity
@Table(name = "Device")
public class Device {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private int id;

	@NotBlank(message = "Device name cannot be blank")
	private String name;

	private Integer count;

	// Constructors, getters, and setters

	public Device() {
	}

	public Device(String name, Integer count) {
		this.name = name;
		this.count = count;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public Integer getCount() {
		return count;
	}

	public void setCount(Integer count) {
		this.count = count;
	}

	@Override
	public String toString() {
		return "Device [id=" + id + ", name=" + name + ", count=" + count + "]";
	}
}package com.nt.dto;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.validation.constraints.Email;

import org.hibernate.validator.constraints.NotBlank;
import org.springframework.stereotype.Component;

@Component
@Entity
@Table(name = "employee")
public class employee {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private int id;

	@NotBlank
	private String name;

	@NotBlank
	private String pass;
	@NotBlank
	private String phone;
	@Email(regexp = "^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$")
	private String EMailId;

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getPass() {
		return pass;
	}

	public void setPass(String pass) {
		this.pass = pass;
	}

	public String getPhone() {
		return phone;
	}

	public void setPhone(String phone) {
		this.phone = phone;
	}

	public String getEMailId() {
		return EMailId;
	}

	public void setEMailId(String eMailId) {
		EMailId = eMailId;
	}

	@Override
	public String toString() {
		return "employee [id=" + id + ", name=" + name + ", pass=" + pass + ", phone=" + phone + ", EMailId=" + EMailId
				+ "]";
	}

}
package com.nt.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.nt.dao.DeviceDao;
import com.nt.dto.Device;

@Service
@Transactional

public class DeviceServiceImpl {
	@Autowired
	private DeviceDao DeviceDao;

	public void insert(Device dev, String name, Integer count) {
		DeviceDao.insert(dev, name, count);
	}

	public List<Device> searchDeviceByName(String name) {
		return DeviceDao.searchDeviceByName(name);
	}

	public List<Device> update(String name, int count) {
		
		return DeviceDao.update(name,count);
	}

	public void delete(String name) {
		DeviceDao.delete(name);
	}

}
package com.nt.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.nt.dao.EmployeeDAO;
import com.nt.dto.employee;

@Service
@Transactional

public class EmployeeServiceImpl {

	@Autowired
	private EmployeeDAO employeeDAO;

	public void insert(employee emp) {
		employeeDAO.insert(emp);
	}

	public List<employee> searchEmployeeByName(String pass, String name) {
		return employeeDAO.searchEmployeeByName(pass, name);
	}

	public List<employee> searchEmployee(String EMailId, String name) {
		return employeeDAO.searchEmployee(EMailId, name);
	}
}





<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Home Page</title>
<style>
body {
	font-family: Arial, sans-serif;
	margin: 0;
	padding: 0;
	background-color: #FFE4E1; /* Light pink background */
}

.container {
	max-width: 800px;
	margin: 50px auto;
	padding: 20px;
	background-color: #DB7093; /* Pink background */
	border-radius: 10px;
	box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Shadow effect */
	overflow: hidden;
	border: 5px solid black; /* Light peach border */
	/* Clearfix */
}

.header, .footer {
	background-color: #DB7093; /* Pink background */
	color: #fff; /* White text color */
	padding: 10px;
	text-align: center;
	border-radius: 10px;
	margin-bottom: 20px; /* Spacing between sections */
	border: 2px solid #FFDAB9; /* Light peach border */
}

.content {
	text-align: center;
}

.button-container {
	text-align: center;
	margin-top: 20px;
}

.button-container a {
	display: inline-block;
	padding: 15px 30px;
	background-color: #20B2AA; /* Light sea green background */
	color: #fff; /* White text color */
	text-decoration: none; /* Remove underline */
	border-radius: 5px; /* Rounded corners */
	margin-right: 10px;
	transition: background-color 0.3s ease; /* Smooth color transition */
}

.button-container a:last-child {
	margin-right: 0; /* Remove margin from the last button */
}

.button-container a:hover {
	background-color: #008B8B; /* Darker sea green color on hover */
}

.footer {
	background-color: #20B2AA; /* Light sea green background for footer */
	border: 2px solid #FFDAB9; /* Light peach border */
	margin-top: 20px; /* Space between buttons and footer */
}
</style>
</head>
<body>
	<div class="container">
		<div class="header">
			<h1>Welcome to GMS Team</h1>
		</div>
		<div class="content">
			<div class="welcome">
				<p>Welcome to the GMS Team's Home Page!</p>
				<!-- Add any additional content here -->
			</div>
		</div>
		<div class="button-container">
			<a href="login">Login</a> <a href="register">Register</a>
		</div>
		<div class="footer">
			<p>© 2024 GMS Team. All rights reserved.</p>
		</div>
	</div>
</body>
</html>
<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form"%>
<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Delete Device</title>
<link rel="stylesheet"
	href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
<style>
body {
	font-family: Arial, sans-serif;
	background-color: #8B008B;
	margin: 0;
	padding: 0;
}

.container {
	margin-top: 50px;
}

.card {
	border-radius: 15px;
	box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}
</style>
</head>
<body>
	<div class="container">
		<div class="row justify-content-center">
			<div class="col-md-6">
				<div class="card">
					<div class="card-body">
						<h2 class="card-title">Delete Device</h2>
						<form:form action="${pageContext.request.contextPath}/delete" method="post" modelAttribute="device">
							<div class="form-group">
								<label for="name">Name:</label>
								<form:input path="name" id="name" class="form-control"
									required="true" />
							</div>
							<button type="submit" class="btn btn-danger">Delete</button>
						</form:form>
					</div>
				</div>
			</div>
		</div>
	</div>
</body>
</html>
<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>ERROR PAGE</title>
<style>
body {
	font-family: Arial, sans-serif;
	background-color: #f0f0f0; /* Light gray background */
	margin: 0;
	padding: 0;
}

.container {
	max-width: 800px;
	margin: 50px auto;
	padding: 20px;
	background-color: #B22222; /* White background */
	border-radius: 10px;
	box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Shadow effect */
}

h1 {
	color: #333333; /* Dark text color */
}

p {
	color: #666666; /* Medium text color */
}
</style>
</head>
<body>
	<div class="container">
		
		<c:if test="${not empty message}">
			<h1>Message: ${message}</h1>
		</c:if>

	</div>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Device Management</title>
<style>
body {
	font-family: Arial, sans-serif;
	background-color: #f0f0f0;
	margin: 0;
	padding: 0;
}

.container {
	max-width: 800px;
	margin: 50px auto;
	padding: 20px;
	background-color: #fff;
	border-radius: 10px;
	box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
}

.option-btn {
	display: block;
	width: 100%;
	padding: 15px;
	margin: 10px 0;
	border: none;
	border-radius: 5px;
	font-size: 18px;
	cursor: pointer;
	transition: background-color 0.3s ease;
}

.option-btn:hover {
	background-color: #e0e0e0;
}

@media ( max-width : 600px) {
	.container {
		margin: 20px;
	}
}
</style>
</head>
<body>
	<div class="container">
		<h2 style="text-align: center;">Device Management</h2>
		<button class="option-btn"
			onclick="location.href='/Spring_Project_02/search'">Search
			Devices</button>
		<button class="option-btn"
			onclick="location.href='/Spring_Project_02/insert'">Create
			Device</button>
		<button class="option-btn"
			onclick="location.href='/Spring_Project_02/delete'">Delete
			Device</button>
		<button class="option-btn"
			onclick="location.href='/Spring_Project_02/update'">Update
			Device</button>
	</div>
</body>
</html>
<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Device Successfully Found</title>
<style>
body {
	font-family: Arial, sans-serif;
	background-color: #f0f0f0; /* Light gray background */
	margin: 0;
	padding: 0;
}

.container {
	max-width: 800px;
	margin: 50px auto;
	padding: 20px;
	background-color: #FFF8DC; /* White background */
	border-radius: 10px;
	box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Shadow effect */
}

h1 {
	color: #333333; /* Dark text color */
}

p {
	color: #666666; /* Medium text color */
}
</style>
</head>
<body>
	<div class="container">
		<h1>Device Name: ${device.name}</h1>
		<h1>Device Count: ${device.count}</h1>
		<%-- Display message if available --%>
		<c:if test="${not empty message}">
			<h1>Message: ${message}</h1>
		</c:if>

	</div>
</body>
</html>
<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form"%>
<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Insert Device</title>
<link rel="stylesheet"
	href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
<style>
body {
	font-family: Arial, sans-serif;
	background-color: #40E0D0;
	margin: 0;
	padding: 0;
}

.container {
	margin-top: 50px;
}

.card {
	border-radius: 15px;
	box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}
</style>
</head>
<body>
	<div class="container">
		<div class="row justify-content-center">
			<div class="col-md-6">
				<div class="card">
					<div class="card-body">
						<h2 class="card-title">Insert Device</h2>
						<form:form action="${pageContext.request.contextPath}/insert" method="post"
							modelAttribute="device">
							<div class="form-group">
								<label for="name">Name:</label>
								<form:input path="name" id="name" class="form-control"
									required="true" />
							</div>
							<div class="form-group">
								<label for="count">Count:</label>
								<form:input path="count" id="count" class="form-control"
									type="number" required="true" />
							</div>
							<button type="submit" class="btn btn-primary">Submit</button>
						</form:form>
					</div>
				</div>
			</div>
		</div>
	</div>
</body>
</html>
<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Login</title>
<style>
body {
	font-family: Arial, sans-serif;
	background-color: #f4f4f4;
	margin: 0;
	padding: 0;
}

.container {
	max-width: 400px;
	margin: 50px auto;
	padding: 20px;
	background: #fff;
	border-radius: 5px;
	box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

h1 {
	text-align: center;
	color: #333;
}

.form-group {
	margin-bottom: 20px;
}

label {
	font-weight: bold;
}

input[type="text"], input[type="password"], input[type="submit"] {
	width: 100%;
	padding: 10px;
	margin-top: 5px;
	margin-bottom: 15px;
	border: 1px solid #ccc;
	border-radius: 5px;
	box-sizing: border-box;
}

input[type="submit"] {
	background-color: #007bff;
	color: #fff;
	border: none;
	cursor: pointer;
}

input[type="submit"]:hover {
	background-color: #0056b3;
}
</style>
</head>
<body>
	<div class="container">
		<h1>Login</h1>
		<form:form action="process" method="post" modelAttribute="login">
			<div class="form-group">
				<label for="name">Name:</label>
				<form:input path="name" id="name" />
				<form:errors path="name" cssClass="error-message" />
			</div>
			<div class="form-group">
				<label for="password">Password:</label>
				<form:input path="pass" id="password" type="password" />
				<form:errors path="pass" cssClass="error-message" />
			</div>
			<input type="submit" value="Submit">
		</form:form>
		<div style="text-align: center; margin-top: 20px;">
			<a href="register" class="register-btn">Register</a>
		</div>
	</div>
</body>
</html>
<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Registration</title>
<style>
body {
	font-family: Arial, sans-serif;
	background-color: #f4f4f4;
	margin: 0;
	padding: 0;
}

.container {
	max-width: 400px;
	margin: 50px auto;
	padding: 20px;
	background: #fff;
	border-radius: 5px;
	box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

h1 {
	text-align: center;
	color: #333;
}

.form-group {
	margin-bottom: 20px;
}

label {
	font-weight: bold;
}

input[type="text"], input[type="password"], input[type="email"], input[type="String"],
	input[type="submit"] {
	width: 100%;
	padding: 10px;
	margin-top: 5px;
	margin-bottom: 15px;
	border: 1px solid #ccc;
	border-radius: 5px;
	box-sizing: border-box;
}

input[type="submit"] {
	background-color: #007bff;
	color: #fff;
	border: none;
	cursor: pointer;
}

input[type="submit"]:hover {
	background-color: #0056b3;
}
</style>
</head>
<body>
	<div class="container">
		<h1>Registration</h1>
		<form:form action="Reprocess" method="post" modelAttribute="register">
			<div class="form-group">
				<label for="name">Name:</label>
				<form:input path="name" id="name" />
				<form:errors path="name" cssClass="error-message" />
			</div>
			<div class="form-group">
				<label for="pass">Password:</label>
				<form:input path="pass" id="pass" type="password" />
				<form:errors path="pass" cssClass="error-message" />
			</div>
			<div class="form-group">
				<label for="EMailId">EMailId:</label>
				<form:input path="EMailId" id="EMailId" type="email" />
				<form:errors path="EMailId" cssClass="error-message" />
			</div>
			<div class="form-group">
				<label for="phone">Phone Number:</label>
				<form:input path="phone" id="phone" />
				<form:errors path="phone" cssClass="error-message" />
			</div>

			<input type="submit" value="Register">
		</form:form>
	</div>
</body>
</html>
<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form"%>
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Search Device</title>
<link rel="stylesheet"
	href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
<style>
body {
	font-family: Arial, sans-serif;
	background-color: #FFE4E1;
	margin: 0;
	padding: 0;
}

.container {
	margin-top: 50px;
}

.card {
	border-radius: 15px;
	box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.error {
	color: red;
}
</style>
</head>
<body>
	<div class="container">
		<div class="row justify-content-center">
			<div class="col-md-6">
				<div class="card">
					<div class="card-body">
						<h2 class="card-title">Search Device</h2>
						<form:form action="${pageContext.request.contextPath}/search"
							method="post" modelAttribute="device">
							<div class="form-group">
								<label for="name">Name:</label>
								<form:input path="name" id="name" class="form-control"
									required="true" />
								<!-- Display validation errors -->
								<form:errors path="name" cssClass="error" />
							</div>
							<button type="submit" class="btn btn-primary">Search</button>
						</form:form>
					</div>
				</div>
			</div>
		</div>
	</div>
</body>
</html>
<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Sucesss page</title>
</head>
<body>
	<h1>This is sucess page you login sucessfully login</h1>
</body>
</html><%@ taglib prefix="form" uri="http://www.springframework.org/tags/form"%>
<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Update Device</title>
<link rel="stylesheet"
	href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
<style>
body {
	font-family: Arial, sans-serif;
	background-color: #FA8072;
	margin: 0;
	padding: 0;
}

.container {
	margin-top: 50px;
}

.card {
	border-radius: 15px;
	box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}
</style>
</head>
<body>
	<div class="container">
		<div class="row justify-content-center">
			<div class="col-md-6">
				<div class="card">
					<div class="card-body">
						<h2 class="card-title">Update Device</h2>
						<form:form action="${pageContext.request.contextPath}/update"
							method="post" modelAttribute="device">
							<div class="form-group">
								<label for="name">Name:</label>
								<form:input path="name" id="name" class="form-control"
									required="true" />
							</div>
							<div class="form-group">
								<label for="count">Count:</label>
								<form:input path="count" id="count" class="form-control"
									required="true" />
							</div>
							<button type="submit" class="btn btn-primary">Update</button>
						</form:form>
					</div>
				</div>
			</div>
		</div>
	</div>
</body>
</html>
